@page "/page1"
@using System.Text.Json

@inject IConfiguration Configuration

<h1>Page 1</h1>

<a href="/">Home</a>
<a href="/Page1">Page 1</a>
<a href="/Page2">Page 2</a>

<button class="btn btn-primary" type="submit" @onclick="@OnUploadClick">Upload</button>
<CloudinaryImage CloudName=@this.CloudName
                 PublicId=@this.PublicId
                 Class="d-block" />
<img src=@this.ImageSource />
@code {
    [Inject]
    CloudinaryUploadWidget CloudinaryUploadWidget { get; set; }

    public string CloudName { get; set; }

    public string PublicId { get; set; }

    public string ImageSource { get; set; }

    protected async override Task OnInitializedAsync()
    {
        var cloudinaryUploadWidgetOptions =
           new CloudinaryUploadWidgetOptions
                {
                    CloudName = this.Configuration["CLOUDINARY_CLOUD_NAME"],
                    FolderName = "test/1",
                    Sources = new[] { "local", "url", "camera" },
                    Preset = "z9sgvcfc",
                    AllowCropping = true
                };

        await this.CloudinaryUploadWidget.CreateAsync(cloudinaryUploadWidgetOptions);
    }

    protected async Task OnUploadClick(
        MouseEventArgs mouseEventArgs)
    {
        await this.CloudinaryUploadWidget.OpenWidgetAsync(this.FileUploaded);
    }

    protected void FileUploaded(CloudinaryFileUploaded fileUploaded)
    {
        Console.WriteLine(nameof(Page1));
        Console.WriteLine(JsonSerializer.Serialize(fileUploaded, new JsonSerializerOptions { WriteIndented = true }));

        this.PublicId = fileUploaded.File.PublicId;
        this.CloudName = this.Configuration["CLOUDINARY_CLOUD_NAME"];
        this.ImageSource = fileUploaded.File.Url;

        this.StateHasChanged();
    }
}